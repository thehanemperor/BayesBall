#!/usr/bin/env ruby
#
# Extract tabular data (CSV format) from XML generated by cwbox -X.
#
# Usage:
#
#   xml_to_csv <batters|pitchers> <xml_file>
#
#
# To load batter data from output into MySQL database:
#
#   LOAD DATA LOCAL INFILE '...' INTO TABLE batting_games FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n' IGNORE 0 LINES;
#
# Then convert Retrosheet player ids to BDB ids:
#   UPDATE batting_games bg INNER JOIN players p ON bg.player_id = p.retro_id SET bg.player_id = p.id;
#
#
# To load pitcher data into MySQL database
#   LOAD DATA LOCAL INFILE '...' INTO TABLE pitching_games FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n' IGNORE 0 LINES;
#
# Then convert Retrosheet player ids to BDB ids:
#   UPDATE pitching_games bg INNER JOIN players p ON bg.player_id = p.retro_id SET bg.player_id = p.id;
#

require 'rubygems'
require 'nokogiri'

module ArrayToHash
  def to_hash(a); Hash[*a.flatten]; end
end


@type = ARGV[0]
@file = ARGV[1]
if @file.nil?
  puts "Please specify 'batters' or 'pitchers' as well as a file name."
  exit
elsif !%w[batters pitchers].include?(@type)
  puts "Please specify 'batters' or 'pitchers' as stat type."
  exit
end


class BatterGame < Nokogiri::XML::SAX::Document
  include ArrayToHash
  def start_element(e, a)
    case e
    when 'boxscore'
      a = to_hash(a)
      @game_id = a['game_id']
      @game_date = a['date'].gsub('/', '-')
      @home_team = a['home']
    when 'players'
      a = to_hash(a)
      @team = a['team']
    when 'player'
      a = to_hash(a)
      @player_id = a['id']
    when 'batting'
      a = to_hash(a)
      puts [
        @player_id,
        @game_date[0...4],        # year
        "",                       # league
        @team,                    # team
        @game_date,               # game date
        @home_team,               # home team
        @game_id[-1..-1],         # game_number
        a['ab'].to_i > 0 ? 1 : 0, # 1=player batted, 0=did not bat
        a['ab'],
        a['r'],
        a['h'],
        a['d'],
        a['t'],
        a['hr'],
        a['bi'],
        a['sb'],
        a['cs'],
        a['bb'],
        a['so'],
        a['ibb'],
        a['hp'],
        a['sh'],
        a['sf'],
        a['gdp']
      ].map{ |i| i.to_s == i.to_i.to_s ? (i.to_i < 0 ? "" : i) : "\"#{i}\"" }.join(',')
    end
  end
end

class PitcherGame < Nokogiri::XML::SAX::Document
  include ArrayToHash
  def start_element(e, a)
    case e
    when 'boxscore'
      a = to_hash(a)
      @game_id = a['game_id']
      @game_date = a['date'].gsub('/', '-')
      @home_team = a['home']
    when 'pitching'
      a = to_hash(a)
      @team = a['team']
      @pitchers = {}
    when 'pitcher'
      a = to_hash(a)
      @player_id = a['id']
      @pitchers[@player_id] = @pitchers.include?(@player_id) ?
        merge_stat_arrays(@pitchers[@player_id], pitcher_stats_array(a)) :
        pitcher_stats_array(a)
    end
  end

  def merge_stat_arrays(a, b)
    a[0..6] +                                         # biographical
      sum_binary_array_elements(a[7..13], b[7..13]) + # decision stats
      sum_array_elements(a[14..24], b[14..24]) +      # numeric stats
      sum_binary_array_elements([a[25]], [b[25]]) +   # gf (decision)
      sum_array_elements([a[26]], [b[26]])            # r
  end

  ##
  # Takes two arrays of the same length. Returns an array whose elements are
  # the sums of the elements at the same positions in the given arrays.
  #
  def sum_array_elements(a, b)
    a.zip(b).collect{ |k,v| k + v }
  end

  ##
  # Same as sum_array_elements but the maximum sum is 1.
  # Used for stats like W, L, CG, etc which may be double-reported but
  # for which a player can only collect 1 per game.
  #
  def sum_binary_array_elements(a, b)
    a.zip(b).collect{ |k,v| k + v > 0 ? 1 : 0 }
  end

  def pitcher_stats_array(a)
    [
      @player_id,
      @game_date[0...4],       # year
      "",                      # league
      @team,                   # team
      @game_date,              # game date
      @home_team,              # home team
      @game_id[-1..-1],        # game_number
      a['dec'] == 'W' ? 1 : 0, # w
      a['dec'] == 'L' ? 1 : 0, # l
      1, # g
      a['gs'].to_i,
      a['cg'].to_i,
      a['sho'].to_i,
      a['dec'] == 'S' ? 1 : 0, # sv
      a['outs'].to_i,
      a['h'].to_i,
      a['er'].to_i,
      a['hr'].to_i,
      a['bb'].to_i,
      a['so'].to_i,
      a['ibb'].to_i,
      a['wp'].to_i,
      a['hb'].to_i,
      a['bk'].to_i,
      a['bf'].to_i,
      a['gf'].to_i,
      a['r'].to_i
    ]
  end

  def end_element(e)
    case e
    when 'pitching'
      @pitchers.values.each do |p|
        puts p.map{ |i| i.to_s == i.to_i.to_s ? (i.to_i < 0 ? "" : i) : "\"#{i}\"" }.join(',')
      end
    end
  end
end

klass = @type == 'batters' ? BatterGame : PitcherGame
parser = Nokogiri::XML::SAX::Parser.new(klass.new)
parser.parse_file(File.join(ARGV[1]))
